package arrayStack;
import java.util.Arrays;
import java.util.Scanner;
public class Stack {
	private Object data[];
	int maxSize;
	private int realSize;
	public Stack()                 //初始化，建立一个空栈
	{
		maxSize=10;
		data=new Object[maxSize];
		realSize=-1;
	}
	
	public boolean isEmpty()
	{
		return this.realSize<0;
	}
	public boolean fullStack()
	{
		return realSize+1==maxSize;
	}
	public void enlargeStack()              //把数组的最大容量在原来的基础上扩大
	{   
		System.out.println("输入要增加的栈容量：");
		Scanner i=new Scanner(System.in);
		int increase=i.nextInt();
		maxSize+=increase;
		data=Arrays.copyOf(data,maxSize);
	}
	public int lengthOfStack(){
		return realSize+1;
	}
	public void push(Object o)
	{
		if(fullStack()){System.out.println("栈满，当前栈长为："+(realSize+1)); enlargeStack();}
		data[++realSize]=o;
		System.out.print("入栈元素"+o+' ');
	}
	public void pop()
	{
		if(!isEmpty())
		{
			Object t=data[realSize];
			System.out.print("出栈元素"+t+' ');
			data[realSize]=null;
			realSize--;
		}
		else System.out.println("error!it's a empty stack");
	}
public Object getTop()
{
	return data[realSize];
	}
	public static void main(String[] args){
		System.out.print("(1)初始化栈");
		Stack newstack=new Stack();
		System.out.print('\n'+"(3)依次进栈元素：");
		char[] insert={'a','b','c','d','e'};
		for(int i=0;i<insert.length;i++)
			newstack.push(insert[i]);
		System.out.print('\n'+"(4)栈长为："+newstack.lengthOfStack());
		System.out.print('\n'+"(5)取栈顶元素："+newstack.getTop());
		System.out.print('\n'+"(6)依次出栈：");
		while(!newstack.isEmpty())
		newstack.pop();
		System.out.print('\n'+"(7)释放栈：");
		newstack=null;
	}
}